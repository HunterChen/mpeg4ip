April 26, 2002

MPEG4IP Project
===============

The MPEG4IP project provides a standards-based system for encoding, 
streaming, and playing MPEG-4 encoded audio and video. To achieve 
this we've integrated a number of existing open source packages, and 
also created some original code to fill in the gaps.

Please note this project is intended for developers who are interested
in MPEG-4 audio and video, and Internet streaming. It is not intended
for end-users. Please read all the legal information in the file "COPYING"!

Also note that the primary development focus of this project is the 
Linux platform. If you're going to use the package on other platforms,
especially non-UNIX platforms, you'll probably have some work to do.

Please use the SourceForge site to report problems, suggest enhancements,
ask questions, etc. The URL is http://www.sourceforge.net/projects/mpeg4ip

There is also a project web site at http://www.mpeg4ip.net/ that has some
general information on MPEG4IP.   

We also have a guide to MPEG4IP donated by everwicked.  See
doc/MPEG4IP_Guide.pdf.

Overview
========

There are two ways to use MPEG4IP to create content:

The older method assumes that you've somehow managed to capture raw audio
and/or video into a file. That's the starting point from which you can use
the MPEG4IP encoding tools to create an MP4 file. The simplest method being 
to use the 'mp4encode' script. Detailed instructions for this script and the
individual tools that it uses are in doc/encoding/encoding.htm  

The newer method is an integrated live encoding tool called mp4live.  This 
program is designed to make it easy to create MP4 files or transmit live
audio/video streams over the network. It can even do both things 
simultaneously!  The key requirement to use this tool is to have a video 
capture device and a Video for Linux (v4l) driver for it. So far we've 
tested with the bttv driver for Brooktree based video capture cards, and 
the qce driver for Logitech QuickCam Express USB webcams. Both of these 
solutions can be acquired for about $50 US! Please see the file 
mpeg4ip/server/live/README for more information about mp4live.

Once an MP4 file is prepared, it can be placed in the content 
directory of a streaming server. We typically use Apple's Darwin Streaming 
Server, but any server that understands MP4 files (or hinted Quicktime 
files) can be used. 

When the content is encoded and available on the server, you can run
the player. Start 'gmp4player' and then enter the RTSP URL to the server 
and the content, (command line works too). E.g.  
    $ gmp4player rtsp://myserver.mydomain.com/mycontent.mp4

Although we're focussed on streaming, the player will also playback from
a local file. E.g
    $ gmp4player mycontent.mp4

That's not all! The player is not limited to local playback of MP4 files.
It can also read AVI, CMP, DIVX, AAC, MP3, and WAV. This is useful for 
debugging since the encoded data can be check independently of the MP4 
file container, and known good content, such as your favorite MP3, can be 
used to verify that the player is working correctly with your hardware. E.g.
    $ gmp4player mymusic.mp3

And that's still not all... You can set up your player to run a playlist
by creating a simple text file with the extension .mp4plist, with
each item (file or stream) on it's own line.

Note: If you prefer a no UI version of the player, or your system does not
include GTK or GLIB, just the bare video window, 'mp4player' is available 
to fit that need.


Legal
=====

Please see the file "COPYING".


Building and Installing
=======================

This package uses GNU autoconf, automake, and libtool. It attempts to 
follow the GNU conventions for open source packages. This is complicated
by the fact that we build on many other packages. Where the package was 
already using the GNU tools, we left things alone. Where the package was 
using it's own Makefile, we left things alone if it was a complicated 
Makefile. If it was straightforward we replaced it with an equivalent 
automake file.

If you have to install any of these tools (for example, automake is
not included with Mac OS X), find out where the others are installed
(which autoconf). If the path does not start with /usr/local, use the
"configure --prefix=<path before /bin on other packages>"

For example, if autoconf is in /usr/bin, use the "configure --prefix=/usr"
command when installing automake or libtools.

Note: libtool is frequently not installed on Linux systems (autoconf, 
and automake generally are). You can download libtool from a GNU mirror
site, or http://download.sourceforge.net/mpegip/libtool-1.3.5.tar.gz

In order to compile mpeg4ip, libtool must have a minimum version of 1.3.5.

Be sure to read the OS specific section later before continuing here.

In general, the code should be portable, but as someone once said 
"There's no such thing as portable code, just code that has been ported." 
When you find problems please be sure to use the SourceForge site to tell 
us what you encountered, and hopefully how you fixed it.

To build:
    ./bootstrap
    make
    make install (optional, typically need root privileges)

The bootstrap script will pass any arguments to the configure scripts.

Two options of potential interest are "--disable-server" and "--disable-player"
which disable the building of the server and player respectively. By
default both server and player are built.

If you are building on a system with an Intel x86 CPU clone, you may
need to specify the configuration option "--enable-mmx=no". The
configuration script automatically detects an x86 target CPU and 
enables MMX assembly code in the build (if the NASM assembler is available).
If your CPU doesn't support MMX instructions you will want to disable 
this feature.  The configure script will also check for the minimum
version of nasm supported; we require 0.98.19 or greater.

For the curious, the bootstrap script invokes the configure scripts of 
the included packages that have them, and then our own top level configure 
script is generated and run. At the end of this process all the Makefile's
are ready, and setup in the correct hierarchy. If this doesn't work for you,
you're free to hack as needed ;-)  

Please note that the Apple Darwin Quicktime Streaming Server is NOT distributed
with mpeg4ip. It can be downloaded from Apple, http://www.apple.com/ as either
source or pre-built binaries. For those who choose the source option, below is
the express version of the build and install process for the Darwin Streaming
Server:

To build the Darwin Streaming Server:

    cd DSS4
    ./Buildit

To install the Darwin Streaming Server from the build:
    cd DSS4
    mkdir Dist
    ./DSS_MakeRoot -f Dist
    cd Dist
    ./Install    (need root privileges)

See the documentation that accompanies the server on how to configure it
for your environment. 

Note the default content directory is /usr/local/movies.

There are some sample mp4 files available on the mpeg4ip SourceForge 
download area. Also Envivio, http://www.envivio.com/, has some sample mp4 
files. We suggest first downloading one of these samples and try opening 
the file with gmp4player. If that works, then try copying the file to the 
streaming server's content directory (e.g. /usr/local/movies), and enter 
the appropriate RTSP URL in gmp4player.


OS Supported
============

Currently, we have compiled and tested on the following platforms:
linux, freeBSD, BSD/OS, Solaris, Mac OS X and windows.  For all varieties
of *nux, X11 is required.

To date we've built on Red Hat Linux 6.1, 6.2, 7.0, 7.1, and 7.2 with
the native compilers, and on 7.1 and 7.2 with gcc 3.0.  

Windows
-------

For windows, Visual Studio 6.0 projects are included.  You will need
to install nasm in the VC98/bin directory before compiling.  You should
get nasm-0.98.22-win32.zip from the nasm web site.  You will need to 
rename nasmw.exe to nasm.exe.  We recommend getting Service Pack 5.

We recommend installing DirectX 8.1 or later.  If that is not possible, 
and you have problems with video, try uncommenting out #define OLD_SURFACE
in player/src/video.cpp.

To run mp4player other than in Visual Studio, install both mp4player.exe 
and SDL.DLL into a directory on your Window's path (install them into
the same directory).   You will also need to install all the plugin
.dlls.

For windows GUI player, see below section.

Mac OSX
-------
When building on Mac OSX, you may get an error that libtoolize is
not installed correctly.  Mac OSX comes with libtool installed as
glibtool.  Automake (which doesn't come included with OSX) does not
correct its scripts.

To fix this problem, do a link of libtoolize to glibtoolize (ie:
ln -s libtoolize glibtoolize where ever glibtoolize is installed).

You should also use the --disable-shared command when issuing the
bootstrap shell.  This should be done for you if you use the project
builder project.  

We've tested the latest build on OSX, and have some strange results
at times.  Your mileage may vary.

Slackware
---------
When building on Slackware-8.0, you need to consider the following 
(from maersk):
  The Slackware distribution does not as standard come with shared 
  libraries for libXv and libXxf86dga. In other cases, where you 
  have upgraded from xfree86 version 4.0 to 4.1, you may not have 
  compiled the shared versions. The fix to this is in general is this:

  # pushd /usr/X11R6/lib
  # rm -f libXv.so libXxf86dga.so
  # ld --whole-archive -shared -o \
      libXv.so libXv.a
  # ld --whole-archive -shared -o \
      libXxf86dga.so libXxf86dga.a
  # popd

  Note that you need to be root to do this.

Solaris
-------
When building on Solaris, libtool and gnu make must be installed and
used.  If libtool is installed, you make get a warning message that
common libraries made with gcc less than 3.0 might have problems, 
ignore it, but don't take binary libraries from any other machines.
There may also be problems in server/lame - you may have to change
the compiler name, as well.

General UNIX
------------
If you have built a previous version of mpeg4ip, do a make uninstall first,
or go in and remove libsndfile from your shared libraries directory, unless
you have another version installed.

Executables
===========

If you ran 'make install' with the defaults, then all the MPEG4IP executables
will end up in /usr/local/bin. 

For encoding tools, you get:

mp4live     Integrated, live encoding to file or network - Linux only

mp4encode   Front-end script to the following encoding tools:

avi2raw     Extracts raw audio/video tracks from an AVI file
lboxcrop    Vertically crops raw video to a new aspect ratio
faac        Encodes raw audio into MPEG-4 AAC encoded audio
lame        Encodes raw audio into MP3 encoded audio
mp4venc     Encodes raw video into MPEG-4 encoded video using ISO codec
mp4creator  Creates and hints audio/video tracks to an mp4 file
xvidenc     Encodes raw video into MPEG-4 encoded video using the Xvid codec

These are described in more detail in doc/encoding/encoding.htm

NOTE ABOUT LAME.
If you had already installed lame, the previous excutables will not be 
replaced by this one in spite of their versions. If you want to update 
lame, you need to perform it by yourself.


A few debugging tools are also included:

mp4extract  Utility to extract tracks from an MP4 file
mp4dump     Utility to dump MP4 file meta-information in text form
mp4info     Utility to display MP4 file summary
avidump     Utility to display AVI file summary
yuvdump     Utility to display a raw video file on the screen


For playback, you get:

gmp4player  Simple graphical interface player
mp4player   Bare video window with sync'ed audio

If you installed the Darwin Streaming Server, those executables will end
up in /usr/local/sbin.

DarwinStreamingServer    Provides streaming service for MP4 files
PlaylistBroadcaster      Provides multicast playlist service for MP4 files

Executable Notes
================

FAAC
====
In our desire to make the package smaller, we have removed SNDFILE.
This has the effect of allowing FAAC to only encode raw PCM files,
unless bootstrap detects that SNDFILE is installed.

If the existing translation behaviour of FAAC is required, please
obtain SNDFILE and install it, then re-run bootstrap and make for
*nux base platforms.  For windows based platforms, obtain a fresh
copy of faac and use it instead of the one in our package.

Directory Structure
===================

If you're going to start hacking, a map of the territory may prove useful:

mpeg4ip - top level project directory

    config - autoconf files

    doc - the minimal doc we've written so far
        encoding - how to encode contenet
        ietf - copies of the relevant RFC's
        mcast - how to multicast 
		mp4v2 - man pages for mp4v2 library
		programs - man pages for core programs

    include - project wide includes 

    common - shared code
        video 
	    libmpeg3 - mpeg1/2 encoder/decoder
            mpeg4 - ISO MPEG-4 video encoder/decoder

    lib - project wide libraries
        SDL - Simple DirectMedia Layer
        avi - AVI file format
        bitstream - MPEG style low level bitstream utlity
        config_file - Configuration file utility
        gnu
            getopt - gnu getopt routines
        mp4 - MP4 (aka MOV/Quicktime) file format library
        mp4v2 - new MP4 library written from scratch
			test - contains some test programs
            util - contains new mp4dump and mp4extract utilities
        msg_queue - SDL based Inter-thread messages utlity
        rtp - UCL RTP 
        sdp - Our own SDP
        win32 - libary files need for MS Windows
	xvid - xvid video encoder/decoder

    player - player specific code
        lib - libraries specifically for the player
            audio
                faad - FAAD AAC decoder
                mp3 - MP3 decoder
            libhttp - Our own http client
            rtsp - Our own RTSP client 
        plugin - home of player plugins
            audio - audio plugins
               raw - raw audio plugin
            video - video plugins
               raw - raw video plugin
 	       xvid - xvid video plugin
        src - the player executable
            codec - 
                aa - aac plugin
                mp3 - mp3 plugin
                mpeg4 - mpeg4 ISO decoder plugin
                wav - wav plugin
            osx - Mac OS X UI
	    win_common - common windows code
            win_client - windows client
            win_gui - windows gui code.

    server - server specific code
        audio
            faac - AAC encoder program
            lame - MP3 encoder program
        mp4creator - create and hint A/V tracks to an mp4 file
        mp4live - mp4 live encoding interface
            gui - gtk gui for mp4 live.
        util
            avi2raw - extract raw A/V data from AVI files
            avidump - dump AVI meta information.
            lboxcrop - vertically crop raw video 
            mp4encode - front-end script to simplify encoding process
            rgb2yuv - rgb to yuv converter
            xvidenc - command line interface to Xvid MPEG-4 encoder
        video
			H26L - ITU H.26L TML 9.4 reference video encoder (EXPERIMENTAL)

    util - generally useful utilities
        yuv - simple tools for examining raw video


Standards Compliance
====================

We're not only supporters of open source, we're supporters of open standards!
We've attempted to use the publically defined standards as much as possible.
Here's what we believe we are following. If you find something non-compliant,
please let us know. We certainly will want to fix it.

Here are the citations:

ISO/IEC 14496-1:2001 MPEG-4 Systems (includes MP4 file format)
ISO/IEC 14496-2:2000 MPEG-4 Video
ISO/IEC 14496-3:1999 MPEG-4 Audio (includes AAC)
ISO/IEC 11172-3:1993 MPEG-1 Audio (includes MP3)
ISO/IEC 13818-3:1998 MPEG-2 Audio (includes extensions to MP3)
ISO/IEC 13818-7:1997 MPEG-2 AAC

The ISO/IEC documents must be purchased from either ISO (www.iso.ch)
or one of the national bodies. In the US, ANSI is the representative
body, and provides an online store under www.ansi.org


IETF RFC 1889 & 1890 RTP

IETF RFC 2326 RTSP

IETF RFC 2327 SDP

IETF RFC 2250 RTP Payload for MPEG-1/2
    Note: we're just using the audio part for MP3.

IETF RFC 3119 A More Loss-Tolerant RTP Payload Format for MP3 Audio

IETF RFC 3016 RTP Payload for MPEG-4 Audio/Visual
    Note: we're implementing the MPEG-4 video part

IETF draft-vandermeer-mpeg4-simple-01.txt - work in progress
    Note: we're implementing the AAC audio part

The IETF RFCs can be found in mpeg4ip/doc/ietf


Note the MP4 file format is derived from Apple's QuickTime file format.
That specification is:

Apple Computer QuickTime File Format, June 28 2000
http://developer.apple.com/quicktime/


We're also involved in the Internet Streaming Media Alliance (ISMA) 
which seeks to standardize the protocols and formats used for streaming.
We believe MPEG4IP is interoperable with that organization's 1.0 Technical 
Specification. For more information see http://www.isma.tv


Player Plugins
==============

Starting with version 0.9.3.2, we've gone to a plugin model for audio
and video codecs for the player.  This is true for both windows and
linux platforms.

On linux (and linux like) platforms, the plugins should be in the 
mp4player_plugin directory, which is a sub directory of where the
other mpeg4ip libraries will be stored.  You must do a make install
of the plugin when running/debugging with plugins - the player does
not currently search for plugins.  When installing a new version of
the plugins, it is a good idea to purge this directory.

On Windows, the .dlls that get created must be in the same directory as 
the executable for mp4player.exe or wmp4client.exe.  The project files
should copy the plugin DLLs to the player/src directory, so when 
running the player, it should work fine.

The plugin pattern can be found in player/src/codec_plugin.h.  It
is bound to change fairly rapidly for the next couple of CVS releases.

MP4Player key shortcuts
=======================

If you are using mp4player, the following key short cuts can be used, 
assuming you've got a video window:

HOME - begin video from beginning
PAGE UP - increase video size (200% max)
PAGE DOWN - decrease video size (50% min)
ALT-ENTER - fullscreen
ESC - return from fullscreen
LEFT ARROW - go back 10 seconds
RIGHT ARROW - go forward 10 seconds
UP ARROW - volume up 1/10th
DOWN ARROW - volume down 1/10th
SPACE - pause or continue
CTRL-C - close video (next if running playlist)
CTRL-X - close mp4player

Windows GUI
===========

We've created a simple windows GUI.  It consists of 2 parts - 
wmp4player and wmp4client.  wmp4player contains the GUI, and 
wmp4client is basically mp4player that will communicate with
wmp4player.

wmp4client is launched as a seperate process, due to SDL limitations.
The 2 processes communicate using file maps in memory.  See the CMp4Process
and CMP4If classes in wmp4player and CClientProcess in wmp4client.

To create this, look for the player60.dsw in player/src directory. This
will make all 3 executables (mp4player, wmp4player.exe and wmp4client.exe,
as well as all the plugins).

To install wmp4player, put the wmp4player.exe, wmp4client.exe and
SDL.dll in the same directory.  We will not be writing any installers.
In addition, make sure all desired plugins are in the same directory.

These programs will use the registry for storing information that
Linux stores in .gmp4player_rc.  Look for the Software\Mpeg4ip\Config
registry entry.  Our config file library is rigged to save this data
there.  mp4player will still use a gmp4player_rc file.

At this time, if it's broken, you're going to have to fix it.  The
same goes with GUI "nits" - we're not GUI writers.  Currently, there is
no playlist support, no loop support, no drag and drop support, no
wmp4player command line support, no accelerator from the dialog 
window (accelerators from the video window still work).

Known Problems
==============

* If you're playing through a NAT box, you may have to specify the
  default client IP ports.  Use the command RtpIpPortMin=<port> and
  RtpIpPortMax=<port> in the .gmp4player_rc file created in your home
  directory.  The IETF recommends a range of 6970 to 6999.

* The ISO MPEG-4 video codec bitrate control feature is broken. We've
  heard that a fix is available, so we're trying to track that down.

* The player for windows is sketchy at best.  We have included project
  files that should build for Dev Studio 6.0. 

* We recommend installing DirectX 8.1 or later.  If that is not possible, 
  and you have problems with video, try uncommenting out #define OLD_SURFACE
  in player/src/video.cpp.

* Mac OSX player sometimes will lock up, or stop playing video while
  continuing the audio - we need someone to help us add the sound buffer 
  delay to get really good audio/video sync.

* FreeBSD based OS's have a problem with thread delays.  This can 
  cause the player to skip rendering many frames.  If you have this
  problem update to the latest version of FreeBSD - the problem still
  can occur, but is reduced. 

  This is due to an error in the thread scheduling code that causes a problem
  with a delay of less than the thread scheduler quantum (200 msec in
  some versions, 20 in others).  Since the average delay used is 9
  to 10 msec (less as we get closer to the video rendering time), this
  can have a great effect on video playback.
  
  You can get around this error by rebuilding your libc, after changing the
  THREAD_SCHED_USECS to 20000 (or lower) from 200000 in thread_private.h.

=== END OF README ===
