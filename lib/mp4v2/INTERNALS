MP4V2 LIBRARY INTERNALS
12/11/01

This document provides an overview of the interals of the mp4v2 library to aid those who wish to modify and extend it. Before reading this document, I recommend familiarizing yourself with the MP4 (or Quicktime) file format standard and the mp4v2 library API.

It is useful to think of the mp4v2 library as consisting of four layers: infrastructure, file format, generic tracks, type specific track helpers. A description of each layer follows.

The infrastructure layer provides basic file I/O, memory allocation, error handling, string utilities, and protected arrays. The source files for this layer are mp4file_io, mp4util, and mp4array. Note that the array classes uses preprocessor macros instead of C++ templates. The rationale for this is to increase portability given the sometimes incomplete support by some compilers for templates.

The file format layer provides the translation from the on-disk MP4 file format to in-memory C++ structures and back to disk. It is meant to exactly match the MP4 specification in syntax and semantics. It represents the majority of the code.

The three key structures at this layer are atoms, properties, and descriptors. 

The mp4atom files contain the base class for all the atoms with generic functions that cover most cases. However, each atom has it's own subclass contained in file atom_<name>.cpp where <name> is the four letter name of the atom defined in the MP4 specification. Typically this file just specifies the properties of the atom or the possible child atoms in the case of a container atom. In more specialized cases the atom specific file provides routines to initialize, read, or write the atom.

	Properties are the atomic pieces of information associated with atoms.
	4 Property types - Integer, Float, String, Bytes
	Get/Set
	Theoretically this is all one needs, however that's painful and slow
	mp4property.cpp

	Property names, "moov.mvhd.duration"
	Need for speed, FindProperty() and save MP4<type>Property*
	"moov.trak[2].tkhd.duration"
	Magic tables "moov.trak[3].minf.mdia.stbl.stsz[101].sampleSize"
	MP4Integer32Property* ->GetValue(101);

	Probably will never use this part of API, but it's there in case the higher
	level API is missing something you need.

	mp4descriptor.cpp, descriptors.cpp, ocidescriptors.cpp, qosqualifiers.cpp
	Shift gears to MPEG conventions
	More use of bitfields and conditional existence 
	Emphasis on bit efficiency - few explicit counters
	Similar to atoms in that they contain properties

	Caveats: Internal 0 based indices, Externally (API) 1 based indices
	Avoid piling too many classes into 1 file, SLOOOOWWW compiles
	Once upon a time all 60+ atom classes were in 1 file, now they're not!

	Few error returns internally, throw if there's a problem

Layer 2 - File and Tracks
	mp4file.cpp and mp4track.cpp

	The two entities at this level are the mp4 file as a whole and the tracks which are contained with it.

	Track time line, samples & durations

Layer 3 - Specific Track Type Helpers 
	OD
	Scene
	Hint
	mp4file.cpp odcommands.cpp rtphint.cpp

Layer 4 - API
	API allows use of all layers 1, 2, and 3
	C linkage 
	All calls protected by try catch blocks
	pass thru to mp4file, ensures that library has internal access 
	to same functions as API does

	mp4.cpp

Debugging
	Verbosity
	mp4dump or MP4Dump()
	mp4extract
	od -t x1z -A x [-j 0xXXXXXX]

