<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<title>Use of the MPEG4IP Server Side Tools</title>
</head>

<body>

<h1 align="center">Use of the MPEG4IP Server Side Tools</h1>

<p>The MPEG4IP Server Side Tools allow for the conversion of raw audio and 
video into MPEG-4 compressed media stored in an MP4 file which can be streamed
by the Darwin Streaming Server.

<p>If you are using a Linux system, the easiest method is to use 
<a href="../../server/mp4live/README.html">mp4live</a>.  Hook
your inputs to your capture card, set your audio and video settings (remember 
to use AAC to create ISMA-compatible content), and start.

<p>If you are using a UNIX system, the next easiest way to proceed is to use the 
<code>mp4encode</code> script which is installed with MPEG4IP. This script 
makes some simplifying assumptions about the input and the
desired output. See <a href="#simple">The Simple Process</a> below.  Note that
the mp4encode script might be outdated.y

<p>If you are using Windows, or if <code>mp4encode</code> doesn't meet your 
needs, you must use the tools directly. See <a href="#detailed">The
Detailed Process</a> below for the details of the underlying tools.

<p><a id="simple"><b>The Simple Process</b>

<ol>
<li><b>Capture raw audio and/or video into an AVI file</b>

<p>The details here are varied. But generally speaking, you use a capture 
program to record audio and video from either a camera or a capture board 
into an AVI file on disk.

<p>The audio format should be PCM raw audio, 16 bits/sample, little-endian byte order.<p>
You can choose the number of channels and sampling frequency (<code>mp4encode</code>
assumes 2 channels, 44100 samples/sec.

<p>The video format should be YUV12, aka YV12.
(FYI: This is a planar format sampled at 4:2:0). Any frame size and frame rate
are acceptable. If your capture program doesn't support this format, capture in
RGB24 (packed format) which every capture program should support; MPEG4IP has a
utility to convert from RGB24 to YUV12.

<p>Personally, I recommend 320x240 @ 24
frames/sec as a good compromise between video quality and size. At these
settings, 5 minutes of raw audio/video will consume approximately 1 GB of disk
space. (Don't worry things get much better once we encode.)

<li><b>Encode content</b>

<p>Invoke 'mp4encode' with the name of the raw AVI file to produce the encoded MP4 file.

<p>The following parameters can be specified to <code>mp4encode</code>

<table cellpadding='5'>
<tbody>
<tr><td><code>-w &lt;uint&gt;</code></td><td>The input video frame width in pixels,
default value is 320</td></tr>
<tr><td><code>-h &lt;uint&gt;</code></td><td>The input video frame height in pixels,
default value is 240</td></tr>
<tr><td><code>-r &lt;uint&gt;</code></td><td>The video frame rate in frames per second,
default value is 24</td></tr>

<tr><td><code>-V &lt;uint&gt;</code></td><td>The desired video bitrate in Kbps, default
value is 500</td></tr>

<tr><td><code>-A &lt;uint&gt;</code></td><td>The desired audio bitrate in Kbps, default
value is 96</td></tr>

<tr><td><code>-a &lt;float&gt;</code></td><td>
The desired aspect ratio, default value is 1.33 (4:3). Typically letterbox is 2.35.</td></tr>

<tr><td><code>-I</code></td><td>
Use the ISO MPEG-4 video encoder instead of the Xvid encoder
</td></tr>

<tr><td><code>-M
</code></td><td>
Use the MP3 audio encoder instead of the AAC encoder
</td></tr>

<tr><td><code>-R
</code></td><td>
The input video is RGB24, convert to YUV12 before encoding.
</td></tr>

<tr><td><code>-d
</code></td><td>
Debug mode, leave intermediate
files.
</td></tr>
</tbody>
</table>



<p>Examples:

<p><code>mp4encode
mycontent.avi</code> (results are written to mycontent.mp4)<o:p></o:p></span></p>

<p><code>mp4encode
-w 640 -h 480 -r 30 -I -R -V 1000 -M -A 128 mycontent.avi mycontent_mpeg4_1000_mp3_128.mp4</code>

<li><b> Make content available</b>

<p>Copy the MP4 file to a directory under the
configured media root for your streaming server. See the documentation for your
server as to how to generate a URL for the file, but typically it would look
like <code>rtsp://myserver/mycontent.mp4</code>

<p>Example:

<p><code>cp mycontent.mp4 /usr/local/movies</code>

</ol>
<p><a id="detailed"> <b>The Detailed Process</b>

<ol>
<li><b>Acquire raw audio and/or video</b>

<p>The details here are varied. But generally speaking, you use a capture 
program to record audio and video from either a camera or a capture board 
into an AVI file on disk.

<p>The audio format should be PCM raw audio, 16 bits/sample, little-endian byte order.<p>
You can choose the number of channels and sampling frequency (<code>mp4encode</code>
assumes 2 channels, 44100 samples/sec.

<p>The video format should be YUV12, aka YV12.
(FYI: This is a planar format sampled at 4:2:0). Any frame size and frame rate
are acceptable. If your capture program doesn't support this format, capture in
RGB24 (packed format) which every capture program should support; MPEG4IP has a
utility to convert from RGB24 to YUV12.

<p>If you use a Windows system for the media
acquisition, you frequently will have your data stored in an AVI file. If that
is the case, the avi2raw utility is provided to extract either the audio or
video tracks from an AVI file, and write the raw track data to a file of your
choice.

<p>Examples:

<p><code>avi2raw -a mymedia.avi myaudio.pcm</code>

<p><code>avi2raw -v mymedia.avi myvideo.yuv</code>

<p><code>avi2raw -v mymedia.avi myvideo.rgb</code>

<p>The avi2raw utility also has very basic
editing capabilities. You can specify a time to start the extraction in seconds
from the beginning of the file and a length in seconds. For example, to extract
10 seconds of video starting at 5 seconds from the beginning of the file.

<p><code>avi2raw –s 5 –l 10 -v mymedia.avi myvideo.yuv</code>

<p>If you have captured the video in RGB24 format, you need to convert that to 
YUV12 before giving it to the video encoder.  To do that use the MPEG4IP utility, rgb2yuv. Note that the video image width and height must be specified for rgb2yuv. For example:
<p><code>rgb2yuv -w 320 -h 240 myvideo.rgb myvideo.yuv</code>

<p>Note that if the avi file already contains encoded content, you can still
use avi2raw to extract into elementary streams.  For example:
<p><code>avi2raw -v mymedia.avi myvideo.xvid</code>

<li><b>Encode audio</b>

<p>For ISMA compliant audio, the popular choice is AAC encoding.  mpeg4ip
will also support MP3 Content.

<ol type='A'>
<li><b>MP3</b>

<p>If you wish to use MP3, download a mp3 encoding package such as LAME, and
follow the directions.

<p>Examples:

<p><code>lame -h -b 128 myaudio.wav</code>

<p><code>lame -h -b 96 -r -x -s 22050 -m m myaudio.pcm</code>

<li><b>AAC</b>

<p>If you wish to use AAC, download an AAC encoding package such as FAAC, 
and follow the directions.

<p>You will want to most likely encode as low-complexity.
<p>Examples (faac version 1.23.1):

<p><code>faac -o 0 -a128 myaudio.wav myaudio.aac</code>

<p><code>faac -o 0 -a96 -P myaudio.pcm myaudio.aac</code>
</ol>
<li><b> Encode video</b>

<p>For mpeg4ip, you will want to encode your video in mpeg4, simple or
advanced simple profile.  We include an older version of the xvid codec.
We also recommend the released version of xvid, or ffmpeg.  We also 
include the ISO encoder, but do not have the encoder linking on Linux.
The ISO encoder contains many of the video tools defined for MPEG-4, and hence
can produce many of the defined profiles. In terms of video quality and
encoding speed we have found the Xvid encoder to be vastly superior.

<p>If you want to use the ISO encoder, you will need to create an executable
and use a file where the many configuration parameters are given. An template parameter
file, 'mp4venc_template.par', is installed into the /usr/local/share directory.
 
<li><b>Adding audio to a MP4 file </b>

<p>Use the provided mp4creator tool to generate an MP4 file from the MP3 or 
AAC encoded file. There are two required parameters: the first is the input 
file name, the second is the output file name. The -H option instructs 
mp4creator to add a hint track needed by the streaming server.

<p>Examples:

<p><code>mp4creator -c myaudio.mp3 -H myaudio.mp4</code>

<p><code>mp4creator -c myaudio.aac -H myaudio.mp4</code>

<li><b>Adding video to a MP4 file</b>

<p>Use the provided mp4creator tool to generate
an MP4 file from the MPEG-4 Video encoded file. There are three required
parameters the first is the input file name, the second is the video frame
rate, the third is the output file name. The -H option instructs mp4creator to
add a hint track needed by the Darwin Streaming Server.

<p>Examples:

<p><code>mp4creator -c myvideo.xvid -H -r=29.97 myvideo.mp4</code>

<p><code>mp4creator –c myvideo.cmp -H -r=25 myvideo.mp4</code>

<li><b>Create an audio and video mp4 file </b>

<p>Use the provided mp4creator tool to first generate an MP4 file for one of 
the media. Then use the mp4creator tool to add the second media. The resulting 
MP4 file will contain both media tracks and any associated hint tracks.

<p>Example:

<p><code>mp4creator -c myaudio.aac -H mymedia.mp4 </code>

<p><code>mp4creator -c myvideo.xvid -r=15 -H mymedia.mp4</code>

<li><b>Useful options </b>

<p><code>-mtu=&lt;uint&gt;</code> Use the given number as the MTU
size for hinting, the default value is 1500 bytes

<p><code>-verbosity=&lt;uint&gt;</code> Emits increasing levels about what is
happening to stdout

<li><b>Make content available</b>

<p>Copy the MP4 file to a directory under the
configured media root for your streaming server. See the documentation for your
server as to how to generate a URL for the file, but typically it would look
like rtsp://myserver/mymedia.mp4

<p><span style='font-family:Arial'>Example:

<p><code>cp mymedia.mp4 /usr/local/movies

</ol>
</body>

</html>
